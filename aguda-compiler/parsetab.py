
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightSEMICOLONrightASSIGNrightARROWnonassocWHILEIFrightTHENELSEleftORleftANDleftEQUALSNOT_EQUALSleftLESSLESS_EQUALGREATERGREATER_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightUMINUSNOTAND ARROW ASSIGN BAR BOOL_TYPE COLON COMMA DIVIDE DO ELSE EQUALS FALSE GREATER GREATER_EQUAL ID IF INT_LITERAL INT_TYPE LBRACKET LESS LESS_EQUAL LET LPAREN MINUS MOD NEW NOT NOT_EQUALS NULL OR PLUS POWER RBRACKET RPAREN SEMICOLON SET STRING_LITERAL STRING_TYPE THEN TIMES TRUE UNDERSCORE UNIT UNIT_TYPE WHILEprogram : declarationsdeclarations : declaration declarations_taildeclarations_tail : declaration declarations_tail\n| emptydeclaration : variable_declaration\n| function_declarationfunction_declaration : LET ID LPAREN parameters RPAREN COLON function_type ASSIGN expparameters : variable parameters_tailparameters_tail : COMMA variable parameters_tail\n| empty\ntype : base_type\n     | array_type\n\nbase_type : INT_TYPE\n          | STRING_TYPE\n          | UNIT_TYPE\n          | BOOL_TYPE\narray_type : type LBRACKET RBRACKETfunction_type : type ARROW type\n| LPAREN type function_type_tail RPAREN ARROW typefunction_type_tail : COMMA type function_type_tail\n| emptyexp : variable\n| literal\n| binary_exp\n| unary_exp\n| function_call\n| assignment\n| variable_declaration\n| if_then_else\n| if_then\n| while_loop\n| array_creation\n| array_access\n| groupvariable : ID\n| UNDERSCOREliteral : INT_LITERAL\n| TRUE\n| FALSE\n| NULL\n| UNIT\n| STRING_LITERALbinary_exp : exp PLUS exp\n| exp MINUS exp\n| exp TIMES exp\n| exp DIVIDE exp\n| exp MOD exp\n| exp POWER exp\n| exp EQUALS exp\n| exp NOT_EQUALS exp\n| exp LESS exp\n| exp LESS_EQUAL exp\n| exp GREATER exp\n| exp GREATER_EQUAL exp\n| exp AND exp\n| exp OR exp\n| exp SEMICOLON expunary_exp : MINUS exp %prec UMINUS\n| NOT expfunction_call : variable LPAREN arguments RPARENarguments : exp arguments_tailarguments_tail : COMMA exp arguments_tail\n| emptyassignment : SET lhs ASSIGN explhs : variable\n| array_accessarray_access : lhs LBRACKET exp RBRACKETvariable_declaration : LET variable COLON type ASSIGN expif_then_else : IF exp THEN exp ELSE exp %prec IFif_then : IF exp THEN exp %prec IFwhile_loop : WHILE exp DO exp %prec WHILEarray_creation : NEW type LBRACKET exp BAR exp RBRACKETgroup : LPAREN exp RPARENempty :'
    
_lr_action_items = {'LET':([0,3,4,5,7,12,23,26,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,118,120,122,124,125,126,127,132,135,136,140,144,],[6,6,-5,-6,6,-36,-35,32,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-58,-59,32,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,32,32,32,32,32,-60,32,-64,-67,-70,-71,-7,32,32,-69,-72,]),'$end':([1,2,3,4,5,7,8,9,12,13,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,124,125,126,127,132,140,144,],[0,-1,-74,-5,-6,-74,-2,-4,-36,-3,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,-7,-69,-72,]),'ID':([6,15,26,30,32,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[11,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'UNDERSCORE':([6,15,26,30,32,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'COLON':([10,11,12,23,28,],[14,-35,-36,-35,62,]),'LPAREN':([11,12,23,26,33,53,54,55,58,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[15,-36,-35,55,64,55,55,55,55,55,90,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'COMMA':([12,17,18,19,20,21,22,23,25,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,61,63,80,81,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,117,120,124,125,126,127,134,138,140,144,],[-36,-11,-12,-13,-14,-15,-16,-35,30,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-17,30,-58,-59,122,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,130,-60,-64,-67,-70,-71,122,130,-69,-72,]),'RPAREN':([12,17,18,19,20,21,22,23,24,25,29,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,61,63,80,81,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,117,120,121,123,124,125,126,127,129,131,134,138,139,140,143,144,],[-36,-11,-12,-13,-14,-15,-16,-35,28,-74,-8,-10,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-17,-74,-58,-59,111,-9,120,-74,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,-74,-60,-61,-63,-64,-67,-70,-71,137,-21,-74,-74,-62,-69,-20,-72,]),'PLUS':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,65,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,65,65,65,65,-43,-44,-45,-46,-47,-48,65,65,65,65,65,65,65,65,65,-73,65,-60,65,-67,65,65,65,65,65,65,65,-72,]),'MINUS':([12,23,26,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,124,125,126,127,128,132,134,135,136,140,141,144,],[-36,-35,53,-22,66,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-58,-59,66,53,66,66,66,-43,-44,-45,-46,-47,-48,66,66,66,66,66,66,66,66,66,-73,53,66,53,53,53,53,-60,53,66,-67,66,66,66,66,66,53,53,66,66,-72,]),'TIMES':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,67,67,67,67,67,67,-45,-46,-47,-48,67,67,67,67,67,67,67,67,67,-73,67,-60,67,-67,67,67,67,67,67,67,67,-72,]),'DIVIDE':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,68,68,68,68,68,68,-45,-46,-47,-48,68,68,68,68,68,68,68,68,68,-73,68,-60,68,-67,68,68,68,68,68,68,68,-72,]),'MOD':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,69,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,69,69,69,69,69,69,-45,-46,-47,-48,69,69,69,69,69,69,69,69,69,-73,69,-60,69,-67,69,69,69,69,69,69,69,-72,]),'POWER':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,70,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-73,70,-60,70,-67,70,70,70,70,70,70,70,-72,]),'EQUALS':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,71,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,71,71,71,71,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,71,71,71,-73,71,-60,71,-67,71,71,71,71,71,71,71,-72,]),'NOT_EQUALS':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,72,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,72,72,72,72,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,72,72,72,-73,72,-60,72,-67,72,72,72,72,72,72,72,-72,]),'LESS':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,73,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,73,73,73,73,-43,-44,-45,-46,-47,-48,73,73,-51,-52,-53,-54,73,73,73,-73,73,-60,73,-67,73,73,73,73,73,73,73,-72,]),'LESS_EQUAL':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,74,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,74,74,74,74,-43,-44,-45,-46,-47,-48,74,74,-51,-52,-53,-54,74,74,74,-73,74,-60,74,-67,74,74,74,74,74,74,74,-72,]),'GREATER':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,75,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,75,75,75,75,-43,-44,-45,-46,-47,-48,75,75,-51,-52,-53,-54,75,75,75,-73,75,-60,75,-67,75,75,75,75,75,75,75,-72,]),'GREATER_EQUAL':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,76,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,76,76,76,76,-43,-44,-45,-46,-47,-48,76,76,-51,-52,-53,-54,76,76,76,-73,76,-60,76,-67,76,76,76,76,76,76,76,-72,]),'AND':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,77,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,77,77,77,77,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,77,77,-73,77,-60,77,-67,77,77,77,77,77,77,77,-72,]),'OR':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,78,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,78,78,78,78,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,78,-73,78,-60,78,-67,78,78,78,78,78,78,78,-72,]),'SEMICOLON':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,120,124,125,126,127,128,132,134,140,141,144,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,79,79,79,79,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,79,-73,79,-60,-64,-67,-70,-71,79,79,79,-69,79,-72,]),'THEN':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,124,125,126,127,140,144,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,114,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,-69,-72,]),'DO':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,124,125,126,127,140,144,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,115,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,-69,-72,]),'RBRACKET':([12,23,27,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,120,124,125,126,127,140,141,144,],[-36,-35,61,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,125,61,-60,-64,-67,-70,-71,-69,144,-72,]),'ELSE':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,124,125,126,127,140,144,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,135,-71,-69,-72,]),'BAR':([12,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,124,125,126,127,128,140,144,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,136,-69,-72,]),'LBRACKET':([12,16,17,18,19,20,21,22,23,33,45,57,61,83,84,85,89,92,117,125,133,138,145,],[-36,27,-11,-12,-13,-14,-15,-16,-35,-65,-66,86,-17,86,-65,-66,116,27,27,-67,27,27,27,]),'ASSIGN':([12,16,17,18,19,20,21,22,23,61,83,84,85,91,125,133,145,],[-36,26,-11,-12,-13,-14,-15,-16,-35,-17,112,-65,-66,118,-67,-18,-19,]),'INT_TYPE':([14,60,62,90,119,130,142,],[19,19,19,19,19,19,19,]),'STRING_TYPE':([14,60,62,90,119,130,142,],[20,20,20,20,20,20,20,]),'UNIT_TYPE':([14,60,62,90,119,130,142,],[21,21,21,21,21,21,21,]),'BOOL_TYPE':([14,60,62,90,119,130,142,],[22,22,22,22,22,22,22,]),'ARROW':([17,18,19,20,21,22,61,92,137,],[-11,-12,-13,-14,-15,-16,-17,119,142,]),'INT_LITERAL':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'TRUE':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FALSE':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'NULL':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'UNIT':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'STRING_LITERAL':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'NOT':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'SET':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'IF':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'WHILE':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NEW':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,3,7,],[3,7,7,]),'variable_declaration':([0,3,7,26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[4,4,4,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'function_declaration':([0,3,7,],[5,5,5,]),'declarations_tail':([3,7,],[8,13,]),'empty':([3,7,25,63,95,117,134,138,],[9,9,31,31,123,131,123,131,]),'variable':([6,15,26,30,32,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[10,25,33,63,10,33,33,33,84,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'type':([14,60,62,90,119,130,142,],[16,89,92,117,133,138,145,]),'base_type':([14,60,62,90,119,130,142,],[17,17,17,17,17,17,17,]),'array_type':([14,60,62,90,119,130,142,],[18,18,18,18,18,18,18,]),'parameters':([15,],[24,]),'parameters_tail':([25,63,],[29,93,]),'exp':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[34,80,81,82,87,88,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,124,126,127,128,132,134,140,141,]),'literal':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'binary_exp':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'unary_exp':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'function_call':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'assignment':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'if_then_else':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'if_then':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'while_loop':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'array_creation':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'array_access':([26,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[45,45,45,45,85,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'group':([26,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'lhs':([26,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,112,114,115,116,118,122,135,136,],[57,57,57,57,83,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'function_type':([62,],[91,]),'arguments':([64,],[94,]),'arguments_tail':([95,134,],[121,139,]),'function_type_tail':([117,138,],[129,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',26),
  ('declarations -> declaration declarations_tail','declarations',2,'p_declarations','parser.py',30),
  ('declarations_tail -> declaration declarations_tail','declarations_tail',2,'p_declarations_tail','parser.py',37),
  ('declarations_tail -> empty','declarations_tail',1,'p_declarations_tail','parser.py',38),
  ('declaration -> variable_declaration','declaration',1,'p_declaration','parser.py',45),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',46),
  ('function_declaration -> LET ID LPAREN parameters RPAREN COLON function_type ASSIGN exp','function_declaration',9,'p_function_declaration','parser.py',50),
  ('parameters -> variable parameters_tail','parameters',2,'p_parameters','parser.py',54),
  ('parameters_tail -> COMMA variable parameters_tail','parameters_tail',3,'p_parameters_tail','parser.py',58),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','parser.py',59),
  ('type -> base_type','type',1,'p_type','parser.py',73),
  ('type -> array_type','type',1,'p_type','parser.py',74),
  ('base_type -> INT_TYPE','base_type',1,'p_base_type','parser.py',80),
  ('base_type -> STRING_TYPE','base_type',1,'p_base_type','parser.py',81),
  ('base_type -> UNIT_TYPE','base_type',1,'p_base_type','parser.py',82),
  ('base_type -> BOOL_TYPE','base_type',1,'p_base_type','parser.py',83),
  ('array_type -> type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',88),
  ('function_type -> type ARROW type','function_type',3,'p_function_type','parser.py',119),
  ('function_type -> LPAREN type function_type_tail RPAREN ARROW type','function_type',6,'p_function_type','parser.py',120),
  ('function_type_tail -> COMMA type function_type_tail','function_type_tail',3,'p_function_type_tail','parser.py',127),
  ('function_type_tail -> empty','function_type_tail',1,'p_function_type_tail','parser.py',128),
  ('exp -> variable','exp',1,'p_exp','parser.py',135),
  ('exp -> literal','exp',1,'p_exp','parser.py',136),
  ('exp -> binary_exp','exp',1,'p_exp','parser.py',137),
  ('exp -> unary_exp','exp',1,'p_exp','parser.py',138),
  ('exp -> function_call','exp',1,'p_exp','parser.py',139),
  ('exp -> assignment','exp',1,'p_exp','parser.py',140),
  ('exp -> variable_declaration','exp',1,'p_exp','parser.py',141),
  ('exp -> if_then_else','exp',1,'p_exp','parser.py',142),
  ('exp -> if_then','exp',1,'p_exp','parser.py',143),
  ('exp -> while_loop','exp',1,'p_exp','parser.py',144),
  ('exp -> array_creation','exp',1,'p_exp','parser.py',145),
  ('exp -> array_access','exp',1,'p_exp','parser.py',146),
  ('exp -> group','exp',1,'p_exp','parser.py',147),
  ('variable -> ID','variable',1,'p_variable','parser.py',151),
  ('variable -> UNDERSCORE','variable',1,'p_variable','parser.py',152),
  ('literal -> INT_LITERAL','literal',1,'p_literal','parser.py',156),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',157),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',158),
  ('literal -> NULL','literal',1,'p_literal','parser.py',159),
  ('literal -> UNIT','literal',1,'p_literal','parser.py',160),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','parser.py',161),
  ('binary_exp -> exp PLUS exp','binary_exp',3,'p_binary_exp','parser.py',176),
  ('binary_exp -> exp MINUS exp','binary_exp',3,'p_binary_exp','parser.py',177),
  ('binary_exp -> exp TIMES exp','binary_exp',3,'p_binary_exp','parser.py',178),
  ('binary_exp -> exp DIVIDE exp','binary_exp',3,'p_binary_exp','parser.py',179),
  ('binary_exp -> exp MOD exp','binary_exp',3,'p_binary_exp','parser.py',180),
  ('binary_exp -> exp POWER exp','binary_exp',3,'p_binary_exp','parser.py',181),
  ('binary_exp -> exp EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',182),
  ('binary_exp -> exp NOT_EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',183),
  ('binary_exp -> exp LESS exp','binary_exp',3,'p_binary_exp','parser.py',184),
  ('binary_exp -> exp LESS_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',185),
  ('binary_exp -> exp GREATER exp','binary_exp',3,'p_binary_exp','parser.py',186),
  ('binary_exp -> exp GREATER_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',187),
  ('binary_exp -> exp AND exp','binary_exp',3,'p_binary_exp','parser.py',188),
  ('binary_exp -> exp OR exp','binary_exp',3,'p_binary_exp','parser.py',189),
  ('binary_exp -> exp SEMICOLON exp','binary_exp',3,'p_binary_exp','parser.py',190),
  ('unary_exp -> MINUS exp','unary_exp',2,'p_unary_exp','parser.py',194),
  ('unary_exp -> NOT exp','unary_exp',2,'p_unary_exp','parser.py',195),
  ('function_call -> variable LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',202),
  ('arguments -> exp arguments_tail','arguments',2,'p_arguments','parser.py',206),
  ('arguments_tail -> COMMA exp arguments_tail','arguments_tail',3,'p_arguments_tail','parser.py',210),
  ('arguments_tail -> empty','arguments_tail',1,'p_arguments_tail','parser.py',211),
  ('assignment -> SET lhs ASSIGN exp','assignment',4,'p_assignment','parser.py',218),
  ('lhs -> variable','lhs',1,'p_lhs','parser.py',222),
  ('lhs -> array_access','lhs',1,'p_lhs','parser.py',223),
  ('array_access -> lhs LBRACKET exp RBRACKET','array_access',4,'p_array_access','parser.py',227),
  ('variable_declaration -> LET variable COLON type ASSIGN exp','variable_declaration',6,'p_variable_declaration','parser.py',231),
  ('if_then_else -> IF exp THEN exp ELSE exp','if_then_else',6,'p_if_then_else','parser.py',235),
  ('if_then -> IF exp THEN exp','if_then',4,'p_if_then','parser.py',239),
  ('while_loop -> WHILE exp DO exp','while_loop',4,'p_while_loop','parser.py',255),
  ('array_creation -> NEW type LBRACKET exp BAR exp RBRACKET','array_creation',7,'p_array_creation','parser.py',265),
  ('group -> LPAREN exp RPAREN','group',3,'p_group','parser.py',273),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',277),
]
