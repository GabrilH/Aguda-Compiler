
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightSEMICOLONrightASSIGNrightARROWnonassocWHILEIFrightTHENELSEleftORleftANDleftEQUALSNOT_EQUALSleftLESSLESS_EQUALGREATERGREATER_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightUMINUSNOTAND ARROW ASSIGN BAR BOOL_TYPE COLON COMMA DIVIDE DO ELSE EQUALS FALSE GREATER GREATER_EQUAL ID IF INT_LITERAL INT_TYPE LBRACKET LESS LESS_EQUAL LET LPAREN MINUS MOD NEW NOT NOT_EQUALS NULL OR PLUS POWER RBRACKET RPAREN SEMICOLON SET STRING_LITERAL STRING_TYPE THEN TIMES TRUE UNDERSCORE UNIT UNIT_TYPE WHILEprogram : declarationsdeclarations : declaration declarations_taildeclarations_tail : declaration declarations_tail\n                         | emptydeclaration : variable_declaration\n                   | function_declarationfunction_declaration : LET ID LPAREN parameters RPAREN COLON function_type ASSIGN expparameters : variable parameters_tailparameters_tail : COMMA variable parameters_tail\n                       | empty\n    type : INT_TYPE\n         | STRING_TYPE\n         | UNIT_TYPE\n         | BOOL_TYPE\n         | array_type\n    array_type : type LBRACKET RBRACKET function_type : type ARROW type\n                     | LPAREN type function_type_tail RPAREN ARROW typefunction_type_tail : COMMA type function_type_tail\n                          | emptyexp : variable\n            | literal\n            | binary_exp\n            | unary_exp\n            | function_call\n            | assignment\n            | variable_declaration\n            | if_then_else\n            | if_then\n            | while_loop\n            | array_creation\n            | array_access\n            | groupvariable : ID\n                | UNDERSCOREliteral : INT_LITERAL\n               | TRUE\n               | FALSE\n               | NULL\n               | UNIT\n               | STRING_LITERALbinary_exp : exp PLUS exp\n                    | exp MINUS exp\n                    | exp TIMES exp\n                    | exp DIVIDE exp\n                    | exp MOD exp\n                    | exp POWER exp\n                    | exp EQUALS exp\n                    | exp NOT_EQUALS exp\n                    | exp LESS exp\n                    | exp LESS_EQUAL exp\n                    | exp GREATER exp\n                    | exp GREATER_EQUAL exp\n                    | exp AND exp\n                    | exp OR exp\n                    | exp SEMICOLON expunary_exp : MINUS exp %prec UMINUS\n                 | NOT expfunction_call : variable LPAREN arguments RPARENarguments : exp arguments_tailarguments_tail : COMMA exp arguments_tail\n                      | emptyassignment : SET lhs ASSIGN explhs : variable\n           | array_accessarray_access : lhs LBRACKET exp RBRACKETvariable_declaration : LET variable COLON type ASSIGN expif_then_else : IF exp THEN exp ELSE exp %prec IFif_then : IF exp THEN exp %prec IFwhile_loop : WHILE exp DO exp %prec WHILEarray_creation : NEW type LBRACKET exp BAR exp RBRACKETgroup : LPAREN exp RPARENempty :'
    
_lr_action_items = {'LET':([0,3,4,5,7,12,22,25,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,85,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,115,117,119,121,123,124,125,126,131,134,135,139,143,],[6,6,-5,-6,6,-35,-34,31,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-57,-58,31,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,31,31,31,31,31,-59,31,-63,-66,-69,-70,-7,31,31,-68,-71,]),'$end':([1,2,3,4,5,7,8,9,12,13,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,119,123,124,125,126,131,139,143,],[0,-1,-73,-5,-6,-73,-2,-4,-35,-3,-34,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-59,-63,-66,-69,-70,-7,-68,-71,]),'ID':([6,15,25,29,31,52,53,54,55,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[11,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'UNDERSCORE':([6,15,25,29,31,52,53,54,55,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'COLON':([10,11,12,22,27,],[14,-34,-35,-34,61,]),'LPAREN':([11,12,22,25,32,52,53,54,57,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[15,-35,-34,54,63,54,54,54,54,54,89,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'COMMA':([12,17,18,19,20,21,22,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,62,79,80,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,123,124,125,126,133,137,139,143,],[-35,-11,-12,-13,-14,-15,-34,29,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-16,29,-57,-58,121,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,129,-59,-63,-66,-69,-70,121,129,-68,-71,]),'RPAREN':([12,17,18,19,20,21,22,23,24,28,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,62,79,80,81,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,122,123,124,125,126,128,130,133,137,138,139,142,143,],[-35,-11,-12,-13,-14,-15,-34,27,-73,-8,-10,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-16,-73,-57,-58,110,-9,119,-73,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-73,-59,-60,-62,-63,-66,-69,-70,136,-20,-73,-73,-61,-68,-19,-71,]),'PLUS':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,64,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,64,64,64,64,-42,-43,-44,-45,-46,-47,64,64,64,64,64,64,64,64,64,-72,64,-59,64,-66,64,64,64,64,64,64,64,-71,]),'MINUS':([12,22,25,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,123,124,125,126,127,131,133,134,135,139,140,143,],[-35,-34,52,-21,65,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-57,-58,65,52,65,65,65,-42,-43,-44,-45,-46,-47,65,65,65,65,65,65,65,65,65,-72,52,65,52,52,52,52,-59,52,65,-66,65,65,65,65,65,52,52,65,65,-71,]),'TIMES':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,66,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,66,66,66,66,66,66,-44,-45,-46,-47,66,66,66,66,66,66,66,66,66,-72,66,-59,66,-66,66,66,66,66,66,66,66,-71,]),'DIVIDE':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,67,67,67,67,67,67,-44,-45,-46,-47,67,67,67,67,67,67,67,67,67,-72,67,-59,67,-66,67,67,67,67,67,67,67,-71,]),'MOD':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,68,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,68,68,68,68,68,68,-44,-45,-46,-47,68,68,68,68,68,68,68,68,68,-72,68,-59,68,-66,68,68,68,68,68,68,68,-71,]),'POWER':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,69,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-72,69,-59,69,-66,69,69,69,69,69,69,69,-71,]),'EQUALS':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,70,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,70,70,70,70,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,70,70,70,-72,70,-59,70,-66,70,70,70,70,70,70,70,-71,]),'NOT_EQUALS':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,71,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,71,71,71,71,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,71,71,71,-72,71,-59,71,-66,71,71,71,71,71,71,71,-71,]),'LESS':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,72,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,72,72,72,72,-42,-43,-44,-45,-46,-47,72,72,-50,-51,-52,-53,72,72,72,-72,72,-59,72,-66,72,72,72,72,72,72,72,-71,]),'LESS_EQUAL':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,73,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,73,73,73,73,-42,-43,-44,-45,-46,-47,73,73,-50,-51,-52,-53,73,73,73,-72,73,-59,73,-66,73,73,73,73,73,73,73,-71,]),'GREATER':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,74,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,74,74,74,74,-42,-43,-44,-45,-46,-47,74,74,-50,-51,-52,-53,74,74,74,-72,74,-59,74,-66,74,74,74,74,74,74,74,-71,]),'GREATER_EQUAL':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,75,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,75,75,75,75,-42,-43,-44,-45,-46,-47,75,75,-50,-51,-52,-53,75,75,75,-72,75,-59,75,-66,75,75,75,75,75,75,75,-71,]),'AND':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,76,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,76,76,76,76,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,76,76,-72,76,-59,76,-66,76,76,76,76,76,76,76,-71,]),'OR':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,77,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,77,77,77,77,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,77,-72,77,-59,77,-66,77,77,77,77,77,77,77,-71,]),'SEMICOLON':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,124,125,126,127,131,133,139,140,143,],[-35,-34,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,78,78,78,78,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,78,-72,78,-59,-63,-66,-69,-70,78,78,78,-68,78,-71,]),'THEN':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,86,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,119,123,124,125,126,139,143,],[-35,-34,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,113,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-59,-63,-66,-69,-70,-68,-71,]),'DO':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,87,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,119,123,124,125,126,139,143,],[-35,-34,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,114,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-59,-63,-66,-69,-70,-68,-71,]),'RBRACKET':([12,22,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,119,123,124,125,126,139,140,143,],[-35,-34,60,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,124,60,-59,-63,-66,-69,-70,-68,143,-71,]),'ELSE':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,119,123,124,125,126,139,143,],[-35,-34,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-59,-63,-66,134,-70,-68,-71,]),'BAR':([12,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,79,80,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,119,123,124,125,126,127,139,143,],[-35,-34,-21,-67,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-59,-63,-66,-69,-70,135,-68,-71,]),'LBRACKET':([12,16,17,18,19,20,21,22,32,44,56,60,82,83,84,88,91,116,124,132,137,144,],[-35,26,-11,-12,-13,-14,-15,-34,-64,-65,85,-16,85,-64,-65,115,26,26,-66,26,26,26,]),'ASSIGN':([12,16,17,18,19,20,21,22,60,82,83,84,90,124,132,144,],[-35,25,-11,-12,-13,-14,-15,-34,-16,111,-64,-65,117,-66,-17,-18,]),'INT_TYPE':([14,59,61,89,118,129,141,],[17,17,17,17,17,17,17,]),'STRING_TYPE':([14,59,61,89,118,129,141,],[18,18,18,18,18,18,18,]),'UNIT_TYPE':([14,59,61,89,118,129,141,],[19,19,19,19,19,19,19,]),'BOOL_TYPE':([14,59,61,89,118,129,141,],[20,20,20,20,20,20,20,]),'ARROW':([17,18,19,20,21,60,91,136,],[-11,-12,-13,-14,-15,-16,118,141,]),'INT_LITERAL':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'TRUE':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'FALSE':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'NULL':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'UNIT':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'STRING_LITERAL':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'NOT':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'SET':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'IF':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'WHILE':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'NEW':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,3,7,],[3,7,7,]),'variable_declaration':([0,3,7,25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[4,4,4,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'function_declaration':([0,3,7,],[5,5,5,]),'declarations_tail':([3,7,],[8,13,]),'empty':([3,7,24,62,94,116,133,137,],[9,9,30,30,122,130,122,130,]),'variable':([6,15,25,29,31,52,53,54,55,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[10,24,32,62,10,32,32,32,83,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'type':([14,59,61,89,118,129,141,],[16,88,91,116,132,137,144,]),'array_type':([14,59,61,89,118,129,141,],[21,21,21,21,21,21,21,]),'parameters':([15,],[23,]),'parameters_tail':([24,62,],[28,92,]),'exp':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[33,79,80,81,86,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,123,125,126,127,131,133,139,140,]),'literal':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'binary_exp':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'unary_exp':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'function_call':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'assignment':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'if_then_else':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'if_then':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'while_loop':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'array_creation':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'array_access':([25,52,53,54,55,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[44,44,44,44,84,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'group':([25,52,53,54,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'lhs':([25,52,53,54,55,57,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,111,113,114,115,117,121,134,135,],[56,56,56,56,82,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'function_type':([61,],[90,]),'arguments':([63,],[93,]),'arguments_tail':([94,133,],[120,138,]),'function_type_tail':([116,137,],[128,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',26),
  ('declarations -> declaration declarations_tail','declarations',2,'p_declarations','parser.py',30),
  ('declarations_tail -> declaration declarations_tail','declarations_tail',2,'p_declarations_tail','parser.py',37),
  ('declarations_tail -> empty','declarations_tail',1,'p_declarations_tail','parser.py',38),
  ('declaration -> variable_declaration','declaration',1,'p_declaration','parser.py',45),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',46),
  ('function_declaration -> LET ID LPAREN parameters RPAREN COLON function_type ASSIGN exp','function_declaration',9,'p_function_declaration','parser.py',50),
  ('parameters -> variable parameters_tail','parameters',2,'p_parameters','parser.py',54),
  ('parameters_tail -> COMMA variable parameters_tail','parameters_tail',3,'p_parameters_tail','parser.py',58),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','parser.py',59),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',73),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',74),
  ('type -> UNIT_TYPE','type',1,'p_type','parser.py',75),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',76),
  ('type -> array_type','type',1,'p_type','parser.py',77),
  ('array_type -> type LBRACKET RBRACKET','array_type',3,'p_array_type','parser.py',82),
  ('function_type -> type ARROW type','function_type',3,'p_function_type','parser.py',108),
  ('function_type -> LPAREN type function_type_tail RPAREN ARROW type','function_type',6,'p_function_type','parser.py',109),
  ('function_type_tail -> COMMA type function_type_tail','function_type_tail',3,'p_function_type_tail','parser.py',116),
  ('function_type_tail -> empty','function_type_tail',1,'p_function_type_tail','parser.py',117),
  ('exp -> variable','exp',1,'p_exp','parser.py',124),
  ('exp -> literal','exp',1,'p_exp','parser.py',125),
  ('exp -> binary_exp','exp',1,'p_exp','parser.py',126),
  ('exp -> unary_exp','exp',1,'p_exp','parser.py',127),
  ('exp -> function_call','exp',1,'p_exp','parser.py',128),
  ('exp -> assignment','exp',1,'p_exp','parser.py',129),
  ('exp -> variable_declaration','exp',1,'p_exp','parser.py',130),
  ('exp -> if_then_else','exp',1,'p_exp','parser.py',131),
  ('exp -> if_then','exp',1,'p_exp','parser.py',132),
  ('exp -> while_loop','exp',1,'p_exp','parser.py',133),
  ('exp -> array_creation','exp',1,'p_exp','parser.py',134),
  ('exp -> array_access','exp',1,'p_exp','parser.py',135),
  ('exp -> group','exp',1,'p_exp','parser.py',136),
  ('variable -> ID','variable',1,'p_variable','parser.py',140),
  ('variable -> UNDERSCORE','variable',1,'p_variable','parser.py',141),
  ('literal -> INT_LITERAL','literal',1,'p_literal','parser.py',145),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',146),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',147),
  ('literal -> NULL','literal',1,'p_literal','parser.py',148),
  ('literal -> UNIT','literal',1,'p_literal','parser.py',149),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','parser.py',150),
  ('binary_exp -> exp PLUS exp','binary_exp',3,'p_binary_exp','parser.py',165),
  ('binary_exp -> exp MINUS exp','binary_exp',3,'p_binary_exp','parser.py',166),
  ('binary_exp -> exp TIMES exp','binary_exp',3,'p_binary_exp','parser.py',167),
  ('binary_exp -> exp DIVIDE exp','binary_exp',3,'p_binary_exp','parser.py',168),
  ('binary_exp -> exp MOD exp','binary_exp',3,'p_binary_exp','parser.py',169),
  ('binary_exp -> exp POWER exp','binary_exp',3,'p_binary_exp','parser.py',170),
  ('binary_exp -> exp EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',171),
  ('binary_exp -> exp NOT_EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',172),
  ('binary_exp -> exp LESS exp','binary_exp',3,'p_binary_exp','parser.py',173),
  ('binary_exp -> exp LESS_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',174),
  ('binary_exp -> exp GREATER exp','binary_exp',3,'p_binary_exp','parser.py',175),
  ('binary_exp -> exp GREATER_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',176),
  ('binary_exp -> exp AND exp','binary_exp',3,'p_binary_exp','parser.py',177),
  ('binary_exp -> exp OR exp','binary_exp',3,'p_binary_exp','parser.py',178),
  ('binary_exp -> exp SEMICOLON exp','binary_exp',3,'p_binary_exp','parser.py',179),
  ('unary_exp -> MINUS exp','unary_exp',2,'p_unary_exp','parser.py',183),
  ('unary_exp -> NOT exp','unary_exp',2,'p_unary_exp','parser.py',184),
  ('function_call -> variable LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',191),
  ('arguments -> exp arguments_tail','arguments',2,'p_arguments','parser.py',195),
  ('arguments_tail -> COMMA exp arguments_tail','arguments_tail',3,'p_arguments_tail','parser.py',199),
  ('arguments_tail -> empty','arguments_tail',1,'p_arguments_tail','parser.py',200),
  ('assignment -> SET lhs ASSIGN exp','assignment',4,'p_assignment','parser.py',207),
  ('lhs -> variable','lhs',1,'p_lhs','parser.py',211),
  ('lhs -> array_access','lhs',1,'p_lhs','parser.py',212),
  ('array_access -> lhs LBRACKET exp RBRACKET','array_access',4,'p_array_access','parser.py',216),
  ('variable_declaration -> LET variable COLON type ASSIGN exp','variable_declaration',6,'p_variable_declaration','parser.py',220),
  ('if_then_else -> IF exp THEN exp ELSE exp','if_then_else',6,'p_if_then_else','parser.py',224),
  ('if_then -> IF exp THEN exp','if_then',4,'p_if_then','parser.py',228),
  ('while_loop -> WHILE exp DO exp','while_loop',4,'p_while_loop','parser.py',244),
  ('array_creation -> NEW type LBRACKET exp BAR exp RBRACKET','array_creation',7,'p_array_creation','parser.py',254),
  ('group -> LPAREN exp RPAREN','group',3,'p_group','parser.py',262),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',266),
]
