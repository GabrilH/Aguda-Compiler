
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightSEMICOLONrightARROWnonassocWHILEDOIFrightTHENELSEleftORleftANDleftEQUALSNOT_EQUALSleftLESSLESS_EQUALGREATERGREATER_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightUMINUSNOTAND ARROW BAR BOOL_TYPE COLON COMMA DIVIDE DO ELSE EQUALS FALSE GREATER GREATER_EQUAL ID IF INT_LITERAL INT_TYPE LBRACKET LESS LESS_EQUAL LET LPAREN MINUS MOD NEW NOT NOT_EQUALS NULL OR PLUS POWER RBRACKET RPAREN SEMICOLON SET STRING_LITERAL STRING_TYPE THEN TIMES TRUE UNDERSCORE UNIT UNIT_TYPE WHILEprogram : declarationsdeclarations : declaration declarations_taildeclarations_tail : declaration declarations_tail\n                         | emptydeclaration : variable_declaration\n                   | function_declarationfunction_declaration : LET ID LPAREN parameters RPAREN COLON function_type EQUALS expparameters : variable parameters_tailparameters_tail : COMMA variable parameters_tail\n                       | emptytype : base_type array_suffixbase_type : INT_TYPE\n                 | BOOL_TYPE\n                 | UNIT_TYPE\n                 | STRING_TYPEarray_suffix : LBRACKET RBRACKET array_suffix\n                    | emptyfunction_type : type ARROW type\n                     | LPAREN type function_type_tail RPAREN ARROW typefunction_type_tail : COMMA type function_type_tail\n                          | emptyexp : variable\n            | literal\n            | binary_exp\n            | unary_exp\n            | function_call\n            | assignment\n            | variable_declaration\n            | conditional\n            | while_loop\n            | array_creation\n            | array_access\n            | groupvariable : ID\n                | UNDERSCOREliteral : INT_LITERAL\n               | TRUE\n               | FALSE\n               | NULL\n               | UNIT\n               | STRING_LITERALbinary_exp : exp PLUS exp\n                    | exp MINUS exp\n                    | exp TIMES exp\n                    | exp DIVIDE exp\n                    | exp MOD exp\n                    | exp POWER exp\n                    | exp EQUALS exp\n                    | exp NOT_EQUALS exp\n                    | exp LESS exp\n                    | exp LESS_EQUAL exp\n                    | exp GREATER exp\n                    | exp GREATER_EQUAL exp\n                    | exp AND exp\n                    | exp OR exp\n                    | exp SEMICOLON expunary_exp : MINUS exp %prec UMINUS\n                 | NOT expfunction_call : variable LPAREN arguments RPARENarguments : exp arguments_tailarguments_tail : COMMA exp arguments_tail\n                      | emptyassignment : SET lhs EQUALS explhs : variable\n           | array_accessarray_access : lhs LBRACKET exp RBRACKETvariable_declaration : LET variable COLON type EQUALS expconditional : IF exp THEN exp conditional_elseconditional_else : ELSE exp\n                        | emptywhile_loop : WHILE exp DO exparray_creation : NEW type LBRACKET exp BAR exp RBRACKETgroup : LPAREN exp RPARENempty :'
    
_lr_action_items = {'LET':([0,3,4,5,7,12,22,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,119,121,123,125,126,127,128,133,136,137,138,139,143,147,],[6,6,-5,-6,6,-35,-34,33,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-57,-58,33,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,33,33,33,33,33,-59,33,-63,-66,-74,-71,-7,-68,33,-70,33,-69,-72,]),'$end':([1,2,3,4,5,7,8,9,12,13,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,125,126,127,128,133,136,138,143,147,],[0,-1,-74,-5,-6,-74,-2,-4,-35,-3,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,-59,-63,-66,-74,-71,-7,-68,-70,-69,-72,]),'ID':([6,15,25,31,33,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[11,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'UNDERSCORE':([6,15,25,31,33,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'COLON':([10,11,12,22,29,],[14,-34,-35,-34,62,]),'LPAREN':([11,12,22,25,34,53,54,55,58,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[15,-35,-34,55,64,55,55,55,55,55,91,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'COMMA':([12,17,18,19,20,21,22,24,26,28,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,61,63,80,81,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,118,121,125,126,127,128,135,136,138,141,143,147,],[-35,-74,-12,-13,-14,-15,-34,31,-11,-17,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-74,31,-57,-58,-16,123,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,131,-59,-63,-66,-74,-71,123,-68,-70,131,-69,-72,]),'RPAREN':([12,17,18,19,20,21,22,23,24,26,28,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,61,63,80,81,82,90,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,118,121,122,124,125,126,127,128,130,132,135,136,138,141,142,143,146,147,],[-35,-74,-12,-13,-14,-15,-34,29,-74,-11,-17,-8,-10,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-74,-74,-57,-58,112,-16,-9,121,-74,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,-74,-59,-60,-62,-63,-66,-74,-71,140,-21,-74,-68,-70,-74,-61,-69,-20,-72,]),'PLUS':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,66,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,66,66,66,66,66,-42,-43,-44,-45,-46,-47,66,66,66,66,66,66,66,66,-73,66,-59,66,-66,66,66,66,66,66,-68,-70,66,66,-72,]),'MINUS':([12,22,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,121,123,125,126,127,128,129,133,135,136,137,138,139,143,144,147,],[-35,-34,53,-22,67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-57,-58,67,53,67,67,67,67,-42,-43,-44,-45,-46,-47,67,67,67,67,67,67,67,67,-73,53,67,53,53,53,53,-59,53,67,-66,67,67,67,67,67,-68,53,-70,53,67,67,-72,]),'TIMES':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,68,68,68,68,68,68,68,-44,-45,-46,-47,68,68,68,68,68,68,68,68,-73,68,-59,68,-66,68,68,68,68,68,-68,-70,68,68,-72,]),'DIVIDE':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,69,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,69,69,69,69,69,69,69,-44,-45,-46,-47,69,69,69,69,69,69,69,69,-73,69,-59,69,-66,69,69,69,69,69,-68,-70,69,69,-72,]),'MOD':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,70,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,70,70,70,70,70,70,70,-44,-45,-46,-47,70,70,70,70,70,70,70,70,-73,70,-59,70,-66,70,70,70,70,70,-68,-70,70,70,-72,]),'POWER':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,71,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-73,71,-59,71,-66,71,71,71,71,71,-68,-70,71,71,-72,]),'EQUALS':([12,16,17,18,19,20,21,22,26,28,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,61,80,81,82,83,84,85,87,88,90,92,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,134,135,136,138,143,144,147,148,],[-35,25,-74,-12,-13,-14,-15,-34,-11,-17,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-74,-57,-58,65,113,-64,-65,65,65,-16,119,65,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,65,65,65,-73,65,-59,-63,-66,65,65,65,65,-18,65,-68,-70,65,65,-72,-19,]),'NOT_EQUALS':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,72,72,72,72,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,72,72,72,-73,72,-59,-63,-66,72,72,72,72,72,-68,-70,72,72,-72,]),'LESS':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,73,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,73,73,73,73,73,-42,-43,-44,-45,-46,-47,73,-50,-51,-52,-53,73,73,73,-73,73,-59,73,-66,73,73,73,73,73,-68,-70,73,73,-72,]),'LESS_EQUAL':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,74,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,74,74,74,74,74,-42,-43,-44,-45,-46,-47,74,-50,-51,-52,-53,74,74,74,-73,74,-59,74,-66,74,74,74,74,74,-68,-70,74,74,-72,]),'GREATER':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,75,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,75,75,75,75,75,-42,-43,-44,-45,-46,-47,75,-50,-51,-52,-53,75,75,75,-73,75,-59,75,-66,75,75,75,75,75,-68,-70,75,75,-72,]),'GREATER_EQUAL':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,76,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,76,76,76,76,76,-42,-43,-44,-45,-46,-47,76,-50,-51,-52,-53,76,76,76,-73,76,-59,76,-66,76,76,76,76,76,-68,-70,76,76,-72,]),'AND':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,77,77,77,77,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,77,77,-73,77,-59,-63,-66,77,77,77,77,77,-68,-70,77,77,-72,]),'OR':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,78,78,78,78,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,78,-73,78,-59,-63,-66,78,78,78,78,78,-68,-70,78,78,-72,]),'SEMICOLON':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,129,133,135,136,138,143,144,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,79,79,79,79,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,79,-73,79,-59,-63,-66,79,-71,79,79,79,-68,-70,-69,79,-72,]),'THEN':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,87,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,125,126,127,128,136,138,143,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,115,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,-59,-63,-66,-74,-71,-68,-70,-69,-72,]),'DO':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,125,126,127,128,136,138,143,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,116,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,-59,-63,-66,-74,-71,-68,-70,-69,-72,]),'RBRACKET':([12,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,125,126,127,128,136,138,143,144,147,],[-35,-34,61,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,126,-59,-63,-66,-74,-71,-68,-70,-69,147,-72,]),'ELSE':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,125,126,127,128,136,138,143,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,-59,-63,-66,137,-71,-68,-70,-69,-72,]),'BAR':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,80,81,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,125,126,127,128,129,136,138,143,147,],[-35,-34,-22,-67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-36,-37,-38,-39,-40,-41,-57,-58,-48,-42,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-73,-59,-63,-66,-74,-71,139,-68,-70,-69,-72,]),'LBRACKET':([12,17,18,19,20,21,22,26,28,34,45,57,61,83,84,85,89,90,126,],[-35,27,-12,-13,-14,-15,-34,-11,-17,-64,-65,86,27,86,-64,-65,117,-16,-66,]),'INT_TYPE':([14,60,62,91,120,131,145,],[18,18,18,18,18,18,18,]),'BOOL_TYPE':([14,60,62,91,120,131,145,],[19,19,19,19,19,19,19,]),'UNIT_TYPE':([14,60,62,91,120,131,145,],[20,20,20,20,20,20,20,]),'STRING_TYPE':([14,60,62,91,120,131,145,],[21,21,21,21,21,21,21,]),'ARROW':([17,18,19,20,21,26,28,61,90,93,140,],[-74,-12,-13,-14,-15,-11,-17,-74,-16,120,145,]),'INT_LITERAL':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'TRUE':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FALSE':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'NULL':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'UNIT':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'STRING_LITERAL':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'NOT':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'SET':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'IF':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'WHILE':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NEW':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,3,7,],[3,7,7,]),'variable_declaration':([0,3,7,25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[4,4,4,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'function_declaration':([0,3,7,],[5,5,5,]),'declarations_tail':([3,7,],[8,13,]),'empty':([3,7,17,24,61,63,96,118,127,135,141,],[9,9,28,32,28,32,124,132,138,124,132,]),'variable':([6,15,25,31,33,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[10,24,34,63,10,34,34,34,84,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'type':([14,60,62,91,120,131,145,],[16,89,93,118,134,141,148,]),'base_type':([14,60,62,91,120,131,145,],[17,17,17,17,17,17,17,]),'parameters':([15,],[23,]),'array_suffix':([17,61,],[26,90,]),'parameters_tail':([24,63,],[30,94,]),'exp':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[35,80,81,82,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,125,127,128,129,133,135,143,144,]),'literal':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'binary_exp':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'unary_exp':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'function_call':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'assignment':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'conditional':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'while_loop':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'array_creation':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'array_access':([25,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[45,45,45,45,85,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'group':([25,53,54,55,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'lhs':([25,53,54,55,56,58,59,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,113,115,116,117,119,123,137,139,],[57,57,57,57,83,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'function_type':([62,],[92,]),'arguments':([64,],[95,]),'arguments_tail':([96,135,],[122,142,]),'function_type_tail':([118,141,],[130,146,]),'conditional_else':([127,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',25),
  ('declarations -> declaration declarations_tail','declarations',2,'p_declarations','parser.py',29),
  ('declarations_tail -> declaration declarations_tail','declarations_tail',2,'p_declarations_tail','parser.py',36),
  ('declarations_tail -> empty','declarations_tail',1,'p_declarations_tail','parser.py',37),
  ('declaration -> variable_declaration','declaration',1,'p_declaration','parser.py',44),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',45),
  ('function_declaration -> LET ID LPAREN parameters RPAREN COLON function_type EQUALS exp','function_declaration',9,'p_function_declaration','parser.py',49),
  ('parameters -> variable parameters_tail','parameters',2,'p_parameters','parser.py',53),
  ('parameters_tail -> COMMA variable parameters_tail','parameters_tail',3,'p_parameters_tail','parser.py',57),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','parser.py',58),
  ('type -> base_type array_suffix','type',2,'p_type','parser.py',65),
  ('base_type -> INT_TYPE','base_type',1,'p_base_type','parser.py',69),
  ('base_type -> BOOL_TYPE','base_type',1,'p_base_type','parser.py',70),
  ('base_type -> UNIT_TYPE','base_type',1,'p_base_type','parser.py',71),
  ('base_type -> STRING_TYPE','base_type',1,'p_base_type','parser.py',72),
  ('array_suffix -> LBRACKET RBRACKET array_suffix','array_suffix',3,'p_array_suffix','parser.py',76),
  ('array_suffix -> empty','array_suffix',1,'p_array_suffix','parser.py',77),
  ('function_type -> type ARROW type','function_type',3,'p_function_type','parser.py',84),
  ('function_type -> LPAREN type function_type_tail RPAREN ARROW type','function_type',6,'p_function_type','parser.py',85),
  ('function_type_tail -> COMMA type function_type_tail','function_type_tail',3,'p_function_type_tail','parser.py',92),
  ('function_type_tail -> empty','function_type_tail',1,'p_function_type_tail','parser.py',93),
  ('exp -> variable','exp',1,'p_exp','parser.py',100),
  ('exp -> literal','exp',1,'p_exp','parser.py',101),
  ('exp -> binary_exp','exp',1,'p_exp','parser.py',102),
  ('exp -> unary_exp','exp',1,'p_exp','parser.py',103),
  ('exp -> function_call','exp',1,'p_exp','parser.py',104),
  ('exp -> assignment','exp',1,'p_exp','parser.py',105),
  ('exp -> variable_declaration','exp',1,'p_exp','parser.py',106),
  ('exp -> conditional','exp',1,'p_exp','parser.py',107),
  ('exp -> while_loop','exp',1,'p_exp','parser.py',108),
  ('exp -> array_creation','exp',1,'p_exp','parser.py',109),
  ('exp -> array_access','exp',1,'p_exp','parser.py',110),
  ('exp -> group','exp',1,'p_exp','parser.py',111),
  ('variable -> ID','variable',1,'p_variable','parser.py',115),
  ('variable -> UNDERSCORE','variable',1,'p_variable','parser.py',116),
  ('literal -> INT_LITERAL','literal',1,'p_literal','parser.py',120),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',121),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',122),
  ('literal -> NULL','literal',1,'p_literal','parser.py',123),
  ('literal -> UNIT','literal',1,'p_literal','parser.py',124),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','parser.py',125),
  ('binary_exp -> exp PLUS exp','binary_exp',3,'p_binary_exp','parser.py',140),
  ('binary_exp -> exp MINUS exp','binary_exp',3,'p_binary_exp','parser.py',141),
  ('binary_exp -> exp TIMES exp','binary_exp',3,'p_binary_exp','parser.py',142),
  ('binary_exp -> exp DIVIDE exp','binary_exp',3,'p_binary_exp','parser.py',143),
  ('binary_exp -> exp MOD exp','binary_exp',3,'p_binary_exp','parser.py',144),
  ('binary_exp -> exp POWER exp','binary_exp',3,'p_binary_exp','parser.py',145),
  ('binary_exp -> exp EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',146),
  ('binary_exp -> exp NOT_EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',147),
  ('binary_exp -> exp LESS exp','binary_exp',3,'p_binary_exp','parser.py',148),
  ('binary_exp -> exp LESS_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',149),
  ('binary_exp -> exp GREATER exp','binary_exp',3,'p_binary_exp','parser.py',150),
  ('binary_exp -> exp GREATER_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',151),
  ('binary_exp -> exp AND exp','binary_exp',3,'p_binary_exp','parser.py',152),
  ('binary_exp -> exp OR exp','binary_exp',3,'p_binary_exp','parser.py',153),
  ('binary_exp -> exp SEMICOLON exp','binary_exp',3,'p_binary_exp','parser.py',154),
  ('unary_exp -> MINUS exp','unary_exp',2,'p_unary_exp','parser.py',158),
  ('unary_exp -> NOT exp','unary_exp',2,'p_unary_exp','parser.py',159),
  ('function_call -> variable LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',166),
  ('arguments -> exp arguments_tail','arguments',2,'p_arguments','parser.py',170),
  ('arguments_tail -> COMMA exp arguments_tail','arguments_tail',3,'p_arguments_tail','parser.py',174),
  ('arguments_tail -> empty','arguments_tail',1,'p_arguments_tail','parser.py',175),
  ('assignment -> SET lhs EQUALS exp','assignment',4,'p_assignment','parser.py',182),
  ('lhs -> variable','lhs',1,'p_lhs','parser.py',186),
  ('lhs -> array_access','lhs',1,'p_lhs','parser.py',187),
  ('array_access -> lhs LBRACKET exp RBRACKET','array_access',4,'p_array_access','parser.py',191),
  ('variable_declaration -> LET variable COLON type EQUALS exp','variable_declaration',6,'p_variable_declaration','parser.py',195),
  ('conditional -> IF exp THEN exp conditional_else','conditional',5,'p_conditional','parser.py',199),
  ('conditional_else -> ELSE exp','conditional_else',2,'p_conditional_else','parser.py',203),
  ('conditional_else -> empty','conditional_else',1,'p_conditional_else','parser.py',204),
  ('while_loop -> WHILE exp DO exp','while_loop',4,'p_while_loop','parser.py',211),
  ('array_creation -> NEW type LBRACKET exp BAR exp RBRACKET','array_creation',7,'p_array_creation','parser.py',215),
  ('group -> LPAREN exp RPAREN','group',3,'p_group','parser.py',219),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',223),
]
