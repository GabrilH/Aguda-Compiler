
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightSEMICOLONrightARROWnonassocWHILEIFrightTHENELSEleftORleftANDleftEQUALSNOT_EQUALSleftLESSLESS_EQUALGREATERGREATER_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightUMINUSNOTAND ARROW BAR BOOL_TYPE COLON COMMA DIVIDE DO ELSE EQUALS FALSE GREATER GREATER_EQUAL ID IF INT_LITERAL INT_TYPE LBRACKET LESS LESS_EQUAL LET LPAREN MINUS MOD NEW NOT NOT_EQUALS NULL OR PLUS POWER RBRACKET RPAREN SEMICOLON SET STRING_LITERAL STRING_TYPE THEN TIMES TRUE UNDERSCORE UNIT UNIT_TYPE WHILEprogram : declarationsdeclarations : declaration declarations_taildeclarations_tail : declaration declarations_tail\n| emptydeclaration : variable_declaration\n| function_declarationfunction_declaration : LET ID LPAREN parameters RPAREN COLON function_type EQUALS expparameters : variable parameters_tailparameters_tail : COMMA variable parameters_tail\n| emptytype : base_type array_suffixbase_type : INT_TYPE\n| BOOL_TYPE\n| UNIT_TYPE\n| STRING_TYPEarray_suffix : LBRACKET RBRACKET array_suffix\n| emptyfunction_type : type ARROW type\n| LPAREN type function_type_tail RPAREN ARROW typefunction_type_tail : COMMA type function_type_tail\n| emptyexp : variable\n| literal\n| binary_exp\n| unary_exp\n| function_call\n| assignment\n| variable_declaration\n| if_then_else\n| if_then\n| while_loop\n| array_creation\n| array_access\n| groupvariable : ID\n| UNDERSCOREliteral : INT_LITERAL\n| TRUE\n| FALSE\n| NULL\n| UNIT\n| STRING_LITERALbinary_exp : exp PLUS exp\n| exp MINUS exp\n| exp TIMES exp\n| exp DIVIDE exp\n| exp MOD exp\n| exp POWER exp\n| exp EQUALS exp\n| exp NOT_EQUALS exp\n| exp LESS exp\n| exp LESS_EQUAL exp\n| exp GREATER exp\n| exp GREATER_EQUAL exp\n| exp AND exp\n| exp OR exp\n| exp SEMICOLON expunary_exp : MINUS exp %prec UMINUS\n| NOT expfunction_call : variable LPAREN arguments RPARENarguments : exp arguments_tailarguments_tail : COMMA exp arguments_tail\n| emptyassignment : SET lhs EQUALS explhs : variable\n| array_accessarray_access : lhs LBRACKET exp RBRACKETvariable_declaration : LET variable COLON type EQUALS expif_then_else : IF exp THEN exp ELSE exp %prec IFif_then : IF exp THEN exp %prec IFwhile_loop : WHILE exp DO exp %prec WHILEarray_creation : NEW type LBRACKET exp BAR exp RBRACKETgroup : LPAREN exp RPARENempty :'
    
_lr_action_items = {'LET':([0,3,4,5,7,12,22,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,122,124,126,127,128,129,134,137,138,142,146,],[6,6,-5,-6,6,-36,-35,33,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-58,-59,33,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,33,33,33,33,33,-60,33,-64,-67,-70,-71,-7,33,33,-69,-72,]),'$end':([1,2,3,4,5,7,8,9,12,13,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,126,127,128,129,134,142,146,],[0,-1,-74,-5,-6,-74,-2,-4,-36,-3,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,-7,-69,-72,]),'ID':([6,15,25,31,33,54,55,56,57,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[11,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'UNDERSCORE':([6,15,25,31,33,54,55,56,57,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'COLON':([10,11,12,22,29,],[14,-35,-36,-35,63,]),'LPAREN':([11,12,22,25,34,54,55,56,59,60,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[15,-36,-35,56,65,56,56,56,56,56,92,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'COMMA':([12,17,18,19,20,21,22,24,26,28,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,62,64,81,82,91,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,122,126,127,128,129,136,140,142,146,],[-36,-74,-12,-13,-14,-15,-35,31,-11,-17,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-74,31,-58,-59,-16,124,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,132,-60,-64,-67,-70,-71,124,132,-69,-72,]),'RPAREN':([12,17,18,19,20,21,22,23,24,26,28,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,62,64,81,82,83,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,122,123,125,126,127,128,129,131,133,136,140,141,142,145,146,],[-36,-74,-12,-13,-14,-15,-35,29,-74,-11,-17,-8,-10,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-74,-74,-58,-59,113,-16,-9,122,-74,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,-74,-60,-61,-63,-64,-67,-70,-71,139,-21,-74,-74,-62,-69,-20,-72,]),'PLUS':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,67,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,67,67,67,67,67,-43,-44,-45,-46,-47,-48,67,67,67,67,67,67,67,67,-73,67,-60,67,-67,67,67,67,67,67,67,67,-72,]),'MINUS':([12,22,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,124,126,127,128,129,130,134,136,137,138,142,143,146,],[-36,-35,54,-22,68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-58,-59,68,54,68,68,68,68,-43,-44,-45,-46,-47,-48,68,68,68,68,68,68,68,68,-73,54,68,54,54,54,54,-60,54,68,-67,68,68,68,68,68,54,54,68,68,-72,]),'TIMES':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,69,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,69,69,69,69,69,69,69,-45,-46,-47,-48,69,69,69,69,69,69,69,69,-73,69,-60,69,-67,69,69,69,69,69,69,69,-72,]),'DIVIDE':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,70,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,70,70,70,70,70,70,70,-45,-46,-47,-48,70,70,70,70,70,70,70,70,-73,70,-60,70,-67,70,70,70,70,70,70,70,-72,]),'MOD':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,71,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,71,71,71,71,71,71,71,-45,-46,-47,-48,71,71,71,71,71,71,71,71,-73,71,-60,71,-67,71,71,71,71,71,71,71,-72,]),'POWER':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,72,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-73,72,-60,72,-67,72,72,72,72,72,72,72,-72,]),'EQUALS':([12,16,17,18,19,20,21,22,26,28,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,62,81,82,83,84,85,86,88,89,91,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,135,136,142,143,146,147,],[-36,25,-74,-12,-13,-14,-15,-35,-11,-17,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-74,-58,-59,66,114,-65,-66,66,66,-16,120,66,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,66,66,66,-73,66,-60,-64,-67,66,66,66,66,-18,66,66,66,-72,-19,]),'NOT_EQUALS':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,73,73,73,73,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,73,73,73,-73,73,-60,-64,-67,73,73,73,73,73,73,73,-72,]),'LESS':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,74,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,74,74,74,74,74,-43,-44,-45,-46,-47,-48,74,-51,-52,-53,-54,74,74,74,-73,74,-60,74,-67,74,74,74,74,74,74,74,-72,]),'LESS_EQUAL':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,75,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,75,75,75,75,75,-43,-44,-45,-46,-47,-48,75,-51,-52,-53,-54,75,75,75,-73,75,-60,75,-67,75,75,75,75,75,75,75,-72,]),'GREATER':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,76,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,76,76,76,76,76,-43,-44,-45,-46,-47,-48,76,-51,-52,-53,-54,76,76,76,-73,76,-60,76,-67,76,76,76,76,76,76,76,-72,]),'GREATER_EQUAL':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,77,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,77,77,77,77,77,-43,-44,-45,-46,-47,-48,77,-51,-52,-53,-54,77,77,77,-73,77,-60,77,-67,77,77,77,77,77,77,77,-72,]),'AND':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,78,78,78,78,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,78,78,-73,78,-60,-64,-67,78,78,78,78,78,78,78,-72,]),'OR':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,79,79,79,79,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,79,-73,79,-60,-64,-67,79,79,79,79,79,79,79,-72,]),'SEMICOLON':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,130,134,136,142,143,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,80,80,80,80,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,80,-73,80,-60,-64,-67,-70,-71,80,80,80,-69,80,-72,]),'THEN':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,88,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,126,127,128,129,142,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,116,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,-69,-72,]),'DO':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,126,127,128,129,142,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,117,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,-69,-72,]),'RBRACKET':([12,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122,126,127,128,129,142,143,146,],[-36,-35,62,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,127,-60,-64,-67,-70,-71,-69,146,-72,]),'ELSE':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,126,127,128,129,142,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,137,-71,-69,-72,]),'BAR':([12,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,81,82,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,126,127,128,129,130,142,146,],[-36,-35,-22,-68,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-37,-38,-39,-40,-41,-42,-58,-59,-49,-43,-44,-45,-46,-47,-48,-50,-51,-52,-53,-54,-55,-56,-57,-73,-60,-64,-67,-70,-71,138,-69,-72,]),'LBRACKET':([12,17,18,19,20,21,22,26,28,34,46,58,62,84,85,86,90,91,127,],[-36,27,-12,-13,-14,-15,-35,-11,-17,-65,-66,87,27,87,-65,-66,118,-16,-67,]),'INT_TYPE':([14,61,63,92,121,132,144,],[18,18,18,18,18,18,18,]),'BOOL_TYPE':([14,61,63,92,121,132,144,],[19,19,19,19,19,19,19,]),'UNIT_TYPE':([14,61,63,92,121,132,144,],[20,20,20,20,20,20,20,]),'STRING_TYPE':([14,61,63,92,121,132,144,],[21,21,21,21,21,21,21,]),'ARROW':([17,18,19,20,21,26,28,62,91,94,139,],[-74,-12,-13,-14,-15,-11,-17,-74,-16,121,144,]),'INT_LITERAL':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NULL':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'UNIT':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STRING_LITERAL':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'NOT':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'SET':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'IF':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'WHILE':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'NEW':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,3,7,],[3,7,7,]),'variable_declaration':([0,3,7,25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[4,4,4,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'function_declaration':([0,3,7,],[5,5,5,]),'declarations_tail':([3,7,],[8,13,]),'empty':([3,7,17,24,62,64,97,119,136,140,],[9,9,28,32,28,32,125,133,125,133,]),'variable':([6,15,25,31,33,54,55,56,57,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[10,24,34,64,10,34,34,34,85,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'type':([14,61,63,92,121,132,144,],[16,90,94,119,135,140,147,]),'base_type':([14,61,63,92,121,132,144,],[17,17,17,17,17,17,17,]),'parameters':([15,],[23,]),'array_suffix':([17,62,],[26,91,]),'parameters_tail':([24,64,],[30,95,]),'exp':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[35,81,82,83,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,115,126,128,129,130,134,136,142,143,]),'literal':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'binary_exp':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'unary_exp':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'function_call':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'assignment':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'if_then_else':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'if_then':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'while_loop':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'array_creation':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'array_access':([25,54,55,56,57,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[46,46,46,46,86,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'group':([25,54,55,56,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'lhs':([25,54,55,56,57,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,114,116,117,118,120,124,137,138,],[58,58,58,58,84,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'function_type':([63,],[93,]),'arguments':([65,],[96,]),'arguments_tail':([97,136,],[123,141,]),'function_type_tail':([119,140,],[131,145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',25),
  ('declarations -> declaration declarations_tail','declarations',2,'p_declarations','parser.py',29),
  ('declarations_tail -> declaration declarations_tail','declarations_tail',2,'p_declarations_tail','parser.py',36),
  ('declarations_tail -> empty','declarations_tail',1,'p_declarations_tail','parser.py',37),
  ('declaration -> variable_declaration','declaration',1,'p_declaration','parser.py',44),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',45),
  ('function_declaration -> LET ID LPAREN parameters RPAREN COLON function_type EQUALS exp','function_declaration',9,'p_function_declaration','parser.py',49),
  ('parameters -> variable parameters_tail','parameters',2,'p_parameters','parser.py',53),
  ('parameters_tail -> COMMA variable parameters_tail','parameters_tail',3,'p_parameters_tail','parser.py',57),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','parser.py',58),
  ('type -> base_type array_suffix','type',2,'p_type','parser.py',71),
  ('base_type -> INT_TYPE','base_type',1,'p_base_type','parser.py',78),
  ('base_type -> BOOL_TYPE','base_type',1,'p_base_type','parser.py',79),
  ('base_type -> UNIT_TYPE','base_type',1,'p_base_type','parser.py',80),
  ('base_type -> STRING_TYPE','base_type',1,'p_base_type','parser.py',81),
  ('array_suffix -> LBRACKET RBRACKET array_suffix','array_suffix',3,'p_array_suffix','parser.py',85),
  ('array_suffix -> empty','array_suffix',1,'p_array_suffix','parser.py',86),
  ('function_type -> type ARROW type','function_type',3,'p_function_type','parser.py',93),
  ('function_type -> LPAREN type function_type_tail RPAREN ARROW type','function_type',6,'p_function_type','parser.py',94),
  ('function_type_tail -> COMMA type function_type_tail','function_type_tail',3,'p_function_type_tail','parser.py',101),
  ('function_type_tail -> empty','function_type_tail',1,'p_function_type_tail','parser.py',102),
  ('exp -> variable','exp',1,'p_exp','parser.py',109),
  ('exp -> literal','exp',1,'p_exp','parser.py',110),
  ('exp -> binary_exp','exp',1,'p_exp','parser.py',111),
  ('exp -> unary_exp','exp',1,'p_exp','parser.py',112),
  ('exp -> function_call','exp',1,'p_exp','parser.py',113),
  ('exp -> assignment','exp',1,'p_exp','parser.py',114),
  ('exp -> variable_declaration','exp',1,'p_exp','parser.py',115),
  ('exp -> if_then_else','exp',1,'p_exp','parser.py',116),
  ('exp -> if_then','exp',1,'p_exp','parser.py',117),
  ('exp -> while_loop','exp',1,'p_exp','parser.py',118),
  ('exp -> array_creation','exp',1,'p_exp','parser.py',119),
  ('exp -> array_access','exp',1,'p_exp','parser.py',120),
  ('exp -> group','exp',1,'p_exp','parser.py',121),
  ('variable -> ID','variable',1,'p_variable','parser.py',125),
  ('variable -> UNDERSCORE','variable',1,'p_variable','parser.py',126),
  ('literal -> INT_LITERAL','literal',1,'p_literal','parser.py',130),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',131),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',132),
  ('literal -> NULL','literal',1,'p_literal','parser.py',133),
  ('literal -> UNIT','literal',1,'p_literal','parser.py',134),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','parser.py',135),
  ('binary_exp -> exp PLUS exp','binary_exp',3,'p_binary_exp','parser.py',150),
  ('binary_exp -> exp MINUS exp','binary_exp',3,'p_binary_exp','parser.py',151),
  ('binary_exp -> exp TIMES exp','binary_exp',3,'p_binary_exp','parser.py',152),
  ('binary_exp -> exp DIVIDE exp','binary_exp',3,'p_binary_exp','parser.py',153),
  ('binary_exp -> exp MOD exp','binary_exp',3,'p_binary_exp','parser.py',154),
  ('binary_exp -> exp POWER exp','binary_exp',3,'p_binary_exp','parser.py',155),
  ('binary_exp -> exp EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',156),
  ('binary_exp -> exp NOT_EQUALS exp','binary_exp',3,'p_binary_exp','parser.py',157),
  ('binary_exp -> exp LESS exp','binary_exp',3,'p_binary_exp','parser.py',158),
  ('binary_exp -> exp LESS_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',159),
  ('binary_exp -> exp GREATER exp','binary_exp',3,'p_binary_exp','parser.py',160),
  ('binary_exp -> exp GREATER_EQUAL exp','binary_exp',3,'p_binary_exp','parser.py',161),
  ('binary_exp -> exp AND exp','binary_exp',3,'p_binary_exp','parser.py',162),
  ('binary_exp -> exp OR exp','binary_exp',3,'p_binary_exp','parser.py',163),
  ('binary_exp -> exp SEMICOLON exp','binary_exp',3,'p_binary_exp','parser.py',164),
  ('unary_exp -> MINUS exp','unary_exp',2,'p_unary_exp','parser.py',168),
  ('unary_exp -> NOT exp','unary_exp',2,'p_unary_exp','parser.py',169),
  ('function_call -> variable LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',176),
  ('arguments -> exp arguments_tail','arguments',2,'p_arguments','parser.py',180),
  ('arguments_tail -> COMMA exp arguments_tail','arguments_tail',3,'p_arguments_tail','parser.py',184),
  ('arguments_tail -> empty','arguments_tail',1,'p_arguments_tail','parser.py',185),
  ('assignment -> SET lhs EQUALS exp','assignment',4,'p_assignment','parser.py',192),
  ('lhs -> variable','lhs',1,'p_lhs','parser.py',196),
  ('lhs -> array_access','lhs',1,'p_lhs','parser.py',197),
  ('array_access -> lhs LBRACKET exp RBRACKET','array_access',4,'p_array_access','parser.py',201),
  ('variable_declaration -> LET variable COLON type EQUALS exp','variable_declaration',6,'p_variable_declaration','parser.py',205),
  ('if_then_else -> IF exp THEN exp ELSE exp','if_then_else',6,'p_if_then_else','parser.py',209),
  ('if_then -> IF exp THEN exp','if_then',4,'p_if_then','parser.py',213),
  ('while_loop -> WHILE exp DO exp','while_loop',4,'p_while_loop','parser.py',229),
  ('array_creation -> NEW type LBRACKET exp BAR exp RBRACKET','array_creation',7,'p_array_creation','parser.py',239),
  ('group -> LPAREN exp RPAREN','group',3,'p_group','parser.py',243),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',247),
]
